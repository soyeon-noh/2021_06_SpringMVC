<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.callor.gallery.persistance.ext.FileDao"> <!--  mapper 사용하는 dao경로로 바꾸기 -->
 
 	<select id="selectAll"></select>
 	<select id="findById"></select>
 	<!-- 데이터 한개씩 개별적으로  Insert -->
 			<!--  parameterType안써도 Insert에선 오류가 안남.. 왜지? 일단 불안하니 넣어둔다. -->
 	<insert id="insert" parameterType="FileDTO">
 		INSERT INTO tbl_files(
			file_gseq,
			file_original,
			file_upname
 		) VALUES (
			#{file_gseq},
			#{file_original},
			#{file_upname},
 		)
 	</insert>
 	
 	<!--  MySQL에서는 insert보다 insertOrUpdate가 효율적 -->
 	<!--  
 	f_seq 값이 있는 데이터 (이미 저장된 데이터)를 추가하려고 할 때
 	PK 값이 중복되어 내부에서 UNIQUE Exception이 발생하는데
 	이 Exception을 catch하여 Update로 전환하는 
 	MySQL의 고유 명령을 사용하여
 	Insert Or Update 를 수행하는 방법
 	
 	이 문법을 사용하기 위해선 
 	file_seq 데이터를 INSERT하도록 선행코드가 필요하다! 
 	 -->
 	 <insert id="insertOrUpdate" parameterType="FileDTO">
 		INSERT INTO tbl_files(
 			file_seq, file_gseq, file_original, file_upname
 		) VALUES (
 			#{file_seq}, #{file_gseq}, #{file_original}, #{file_upname}
 		)
 		ON DUPLICATE KEY UPDATE
 			file_gseq = #{file_gseq},
 			file_original = #{file_original},
 			file_upname = #{file_upname}
 	</insert>
 	
 	<!-- List<DTO>에 담긴 데이터를 한꺼번에 Insert -->
 	<insert id="insertWithList" parameterType="FileDTO">
 		INSERT INTO tbl_files(file_gseq, file_original, file_upname) 
 		VALUES 
 		<foreach collection="filesList" item="file" separator=", ">
	 		(
				#{file.file_gseq},
				#{file.file_original},
				#{file.file_upname}
	 		)
 		</foreach>
 	</insert>
 	
 	<!-- List<DTO>에 담긴 데이터를 Insert Or Update 수행하기 -->
 	 <insert id="insertOrUpdateWithList" parameterType="FileDTO">
 		INSERT INTO tbl_files
 			(file_seq, file_gseq, file_original, file_upname) 
 		VALUES 
 		<foreach collection="filesList" item="file" separator=", ">
	 		(
	 			#{file.file_seq},
				#{file.file_gseq},
				#{file.file_original},
				#{file.file_upname}
	 		)
 		</foreach>
 		AS NEW(f_seq, f_gseq, f_original, f_upname)
 		ON DUPLICATE KEY UPDATE
 		file_gseq = f_gseq,
 		file_original = f_original,
 		file_upname = f_upname
 	</insert>
 	<!--  -->

 	<update id="update"></update>
 	<delete id="delete">
 		DELETE FROM tbl_files
 		WHERE file_seq = #{file_seq}
 	</delete>
 	
 	<update id="create_tabel">
		CREATE TABLE IF NOT EXISTS tbl_files (
			file_seq	BIGINT	AUTO_INCREMENT PRIMARY KEY,
			file_gseq	BIGINT	NOT NULL,
			file_original	VARCHAR(125)	NOT NULL,
			file_upname	VARCHAR(125)	NOT NULL,
			CONSTRAINT FOREIGN KEY(file_gseq)
			REFERENCES tbl_gallery(g_seq)
			ON DELETE CASCADE
		)
 	</update>
 
 </mapper> 